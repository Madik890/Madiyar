import psycopg2

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = psycopg2.connect(
    dbname="phonebook_db2",
    user="postgres",
    password="e.madiar228",  
    host="localhost",
    port="55555"
)
cur = conn.cursor()

def search_by_pattern(pattern):
    cur.execute("SELECT * FROM search_contacts(%s);", (pattern,))
    results = cur.fetchall()
    print("\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:")
    for row in results:
        print(f"Name: {row[0]}, Phone: {row[1]}")

def insert_or_update_user(name, phone):
    cur.execute("CALL insert_or_update_user(%s, %s);", (name, phone))
    conn.commit()
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–ª—ë–Ω.")

def insert_many_users(user_list):
    cur.execute("CALL insert_many_users(%s);", (user_list,))
    conn.commit()
    print("‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

def get_paginated_contacts(limit, offset):
    cur.execute("SELECT * FROM get_contacts_paginated(%s, %s);", (limit, offset))
    results = cur.fetchall()
    print(f"\nüìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è (limit={limit}, offset={offset}):")
    for row in results:
        print(f"Name: {row[0]}, Phone: {row[1]}")

def delete_user(identifier):
    cur.execute("CALL delete_contact(%s);", (identifier,))
    conn.commit()
    print(f"‚ùå –ö–æ–Ω—Ç–∞–∫—Ç —Å '{identifier}' —É–¥–∞–ª—ë–Ω.")

def main_menu():
    while True:
        print("\n--- PHONEBOOK MENU ---")
        print("1. –ü–æ–∏—Å–∫ –ø–æ —à–∞–±–ª–æ–Ω—É")
        print("2. –î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("3. –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("4. –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π")
        print("5. –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("0. –í—ã–π—Ç–∏")

        choice = input("–í—ã–±–æ—Ä: ")

        if choice == "1":
            pattern = input("–í–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω (–∏–º—è/–Ω–æ–º–µ—Ä): ")
            search_by_pattern(pattern)

        elif choice == "2":
            name = input("–ò–º—è: ")
            phone = input("–¢–µ–ª–µ—Ñ–æ–Ω: ")
            insert_or_update_user(name, phone)

        elif choice == "3":
            count = int(input("–°–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–±–∞–≤–∏—Ç—å? "))
            users = []
            for _ in range(count):
                name = input("–ò–º—è: ")
                phone = input("–¢–µ–ª–µ—Ñ–æ–Ω: ")
                users.append([name, phone])
            insert_many_users(users)

        elif choice == "4":
            limit = int(input("–õ–∏–º–∏—Ç: "))
            offset = int(input("–°–º–µ—â–µ–Ω–∏–µ: "))
            get_paginated_contacts(limit, offset)

        elif choice == "5":
            ident = input("–ò–º—è –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
            delete_user(ident)

        elif choice == "0":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break

        else:
            print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

# –ó–∞–ø—É—Å–∫ –º–µ–Ω—é
if __name__ == "__main__":
    main_menu()
    cur.close()
    conn.close()
